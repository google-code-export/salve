Today's applications are complex. They require modularization,
which in turn requires some sort of dependency management between
objects in different modules. There are two competing ways
to achieve dependency management: tightly couple the objects in different modules via static
lookups, or write decoupled code but introduce an external
dependency management system such as an inversion of control container.

Salve brings a third way, a way that combines the pros of the two afore
mentioned methods, yet avoids all the cons. Salve achieves this by
postprocessing bytecode, either at runtime as a jvm agent or a classloader,
or at compile time as an ant task task or a maven plugin.

|| Static lookup || Inversion of Control || Salve || Salve Instrumented ||
|| {{{
@Entity
class User implements Serializable {
  @GeneratedValue @Id
  private Long id;
  
  private String username;
  
  public void register() {
    SessionFactory factory=
      SessionFactoryLocator.locate();
    factory.persist(this);
    
    EmailService email=
      EmailServiceLocator.locate();
    email.send(email.getSystemAddr(),
      username+"@"+email.getUserDomain(),
      "Welcome");
  }
}
}}} || {{{
@Entity
class User {
  @GeneratedValue @Id
  private Long id;
  
  private String username;

  private SessionFactory factory;
  
  private EmailService email;
  
  public void setSessionFactory(...) {...}

  public void setEmailService(...) {...}
    
  public void register() {
    factory.persist(this);
    
    email.send(email.getSystemAddr(),
      username+"@"+email.getUserDomain(),
      "Welcome");
  }
}

}}} || {{{

@Entity
class User implements Serializable {
  @GeneratedValue @Id
  private Long id;
  
  private String username;

  @Dependency
  private SessionFactory factory;
  
  @Dependency
  private EmailService email;
  
  // setters are not required but good for testing
  public void setSessionFactory(...) {...}

  public void setEmailService(...) {...}
    
  public void register() {
    factory.persist(this);
    
    email.send(email.getSystemAddr(),
      username+"@"+email.getUserDomain(),
      "Welcome");
  }
}

}}} || {{{

@Entity
class User implements Serializable {
  public static final salve.Key __key$factory=
    new salve.Key(...);

  public static final salve.Key __key$email=
    new salve.Key(...);
    

  @GeneratedValue @Id
  private Long id;
  
  private String username;
  
  public void register() {
    SessionFactory __local$factory=
      salve.DependencyLibrary.locate(__key$factory);
    __local$factory.persist(this);
    
    EmailService __local$email=
      salve.DependencyLibrary.locate(__key$email);
    __local$email.send(__local$email.getSystemAddr(),
      username+"@"+__local$email.getUserDomain(),
      "Welcome");
  }
}
}}} ||

