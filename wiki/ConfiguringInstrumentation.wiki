#summary Instructions on configuring Salve's bytecode postprocessing
#labels Phase-Deploy,Featured

== Prerequisites ==
Make sure you have salve jars.
See [BuildingSalve] page for instructions on how to build Salve from source.

You need a small configuration file telling salve which instrumentors to run. This file is kept in META-INF/salve.xml, and usually looks like this:

{{{
<config>
	<package name="<base.package>">
		<instrumentor class="salve.depend.DependencyInstrumentor"/>
	</package>
</config>
}}}

Replace <base.package> with the base package name of your application. For example: `com.mycomp.myapp`. The `<config>` element can contain multiple `<package>` elements.

== JVM Agent ==
=== When ===
Best option for development as no special code post-compilation step is needed, making launching the application directly from an IDE easy. Can also be used at deployment time if access to java command line is available.

=== How ===
To enable the agent add the following JVM option to the startup command:
{{{
-Djavaagent:<path to salve-agent.jar>
}}}

Example:
{{{
java ... -Djavaagent:~/.m2/repository/salve/salve-agent/1.0/salve-agent-1.0.jar
}}}

== Maven2 Build ==
=== When ===
Best option when the project is using maven2 for builds and no java command line access is available for deployment.

=== How ===
Add the following lines to pom.xml

{{{
<dependencies>
  <dependency>
    <!-- salve dependency injection -->
    <groupId>salve</groupId>
    <artifactId>salve-depend</artifactId>
    <version>0.6-SNAPSHOT</version>
   </dependency>
  <dependency>
    <!-- salve dependency instrumentor -->
    <groupId>salve</groupId>
    <artifactId>salve-depend-inst</artifactId>
    <version>0.6-SNAPSHOT</version>
    <!-- no need to include this in final packaging -->
    <scope>provided</scope>
  </dependency>
</dependencies>

<build>
  <plugins>
    <plugin>
      <groupId>salve</groupId>
      <artifactId>salve-maven2</artifactId>
      <executions>
        <execution>
          <!--  if using maven 2.1 or above
                use phase prepare-package instead
          -->
          <phase>test</phase>
          <goals>
          <goal>instrument</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
  </plugins>
</build>
}}}

Maven 2.0.x does not offer a good build-phase hook for processing class files after unit tests and before packaging, so we use the `test` phase which will execute the plugin after unit tests are done. In Maven 2.1.x we can use the new `prepare-package` phase.

== Ant Build ==
Coming soon

== Eclipse ==
Salve has an eclipse builder plugin which can incrementally instrument files as you are editing them. See salve-eclipse module in svn.