#summary Using the @Transactional attribute for declarative transactions

(sorry, this is part of 0.10 and not publically available at this time so stay tuned)

= Introduction =

Use salve for @Transactional support instead of spring

= Details =

Salve provides bytecode instrumentiation of methods with the @Transactional attribute. It's similar to using spring-aop but doesn't require runtime weaving or compliation with AspectJ. Instead the bytecode is modified by Salve to include calls to the platform transaction manager (begin / rollback / commit).

Here's a short sample:


{{{
package demo.salve.transactional;

import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import junit.framework.TestCase;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import salve.depend.DependencyLibrary;
import salve.depend.guice.GuiceBeanLocator;
import salve.depend.spring.txn.AnnotatedTransactionManager;
import salve.depend.spring.txn.TransactionManager;

public class SalveGuiceTransactionalTest extends TestCase
{
  static
  {
    DependencyLibrary.addLocator(new GuiceBeanLocator(Guice.createInjector(new AbstractModule()
    {
      @Override
      protected void configure()
      {
        // create data source
        final DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("org.postgresql.Driver");
        dataSource.setUrl("jdbc:postgresql://localhost/mydb");
        dataSource.setUsername("test");
        dataSource.setPassword("test");

        // create platform transaction manager
        final PlatformTransactionManager tx = new DataSourceTransactionManager(dataSource);
        // bind platform transaction manager to @Transactional annotation
        bind(TransactionManager.class).toInstance(new AnnotatedTransactionManager(tx));

        // more configuration here
        // ...
      }
    })));
  }

  @Transactional(propagation = Propagation.SUPPORTS, timeout = 120, isolation = Isolation.SERIALIZABLE)
  public void testTransaction()
  {
    System.out.println("running inside a transaction now!");
    // do some nice transaction stuff in here
  }
}
}}}