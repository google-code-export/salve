= Introduction =

One of the best features of Spring introduced in 2.0 is the @Transactional annotation which allows an easy declarative control of annotations. Unfortunately it only works on beans managed by Spring inside its context. Salve's transactional instrumentor allows this great feature to be used on any pojo instrumented by Salve independent on whether or not it is declared in the Spring's context.

= Setup =

== Short Verson ==

{{{
<beans>

  <!-- connect salve transactions to spring -->
  <bean class="salve.depend.spring.txn.SpringTransactionManager"/>

  <!-- enable spring's handling of @Transactional to setup the plumbing we will need - this will not interfere with Salve because it removes @Transactional annotation during instrumentation -->
  <tx:annotation-driven>

  <!-- define your required 'transactionManager' here as usual -->
</beans>
}}}

== Long Version ==
(without using tx:annotation-driven tag)

{{{
<beans>
  <!-- connect salve transactions to spring -->
  <bean class="salve.depend.spring.txn.SpringTransactionManager"/>

  <!-- set up the plumbing that tx:annotation-driven would set up for us -->

  <!-- configure transaction attributes on annotation @Transactional -->
  <bean id="txAttributeSource" class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>

  <!-- transaction interceptor for calling transacted methods + types -->
  <bean id="txInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager" ref="transactionManager"/>
    <property name="transactionAttributeSource" ref="txAttributeSource"/>
  </bean>

  <!-- scans for @Transactional on methods + types to recommend for instrumentation -->
  <bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
    <property name="transactionInterceptor" ref="txInterceptor"/>
  </bean>

  <!-- define your required 'transactionManager' here as usual -->

</beans>
}}}